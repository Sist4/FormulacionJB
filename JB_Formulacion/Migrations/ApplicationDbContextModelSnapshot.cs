// <auto-generated />
using System;
using JB_Formulacion.Helper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JB_Formulacion.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JB_Formulacion.Models.CantidadPorLote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cantidad")
                        .HasColumnType("float");

                    b.Property<double>("CantidadPesada")
                        .HasColumnType("float");

                    b.Property<int?>("ComponenteId")
                        .HasColumnType("int");

                    b.Property<string>("Lote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComponenteId");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("JB_Formulacion.Models.Componente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CantidadPesada")
                        .HasColumnType("float");

                    b.Property<double>("CantidadTotal")
                        .HasColumnType("float");

                    b.Property<string>("CodigoArticulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsPesado")
                        .HasColumnType("bit");

                    b.Property<int?>("OrdenComponentesIdOf")
                        .HasColumnType("int");

                    b.Property<bool>("RequiereRepesaje")
                        .HasColumnType("bit");

                    b.Property<string>("UnidadMedida")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrdenComponentesIdOf");

                    b.ToTable("Componentes");
                });

            modelBuilder.Entity("JB_Formulacion.Models.OrdenComponentes", b =>
                {
                    b.Property<int>("IdOf")
                        .HasColumnType("int");

                    b.Property<string>("BodegaDesde")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodegaHasta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodArticulo")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOrdenFabricacion")
                        .HasColumnType("int");

                    b.HasKey("IdOf");

                    b.ToTable("Ordenes");
                });

            modelBuilder.Entity("JB_Formulacion.Models.CantidadPorLote", b =>
                {
                    b.HasOne("JB_Formulacion.Models.Componente", null)
                        .WithMany("CantidadesPorLote")
                        .HasForeignKey("ComponenteId");
                });

            modelBuilder.Entity("JB_Formulacion.Models.Componente", b =>
                {
                    b.HasOne("JB_Formulacion.Models.OrdenComponentes", null)
                        .WithMany("Componentes")
                        .HasForeignKey("OrdenComponentesIdOf");
                });

            modelBuilder.Entity("JB_Formulacion.Models.Componente", b =>
                {
                    b.Navigation("CantidadesPorLote");
                });

            modelBuilder.Entity("JB_Formulacion.Models.OrdenComponentes", b =>
                {
                    b.Navigation("Componentes");
                });
#pragma warning restore 612, 618
        }
    }
}
